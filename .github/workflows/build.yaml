name: Build and Publish Web App

on:
  workflow_dispatch:
    inputs:
        service:
          required: true
          type: choice
          description: 'Choose the service you wish to build and deploy'
          options: 
            - uselessfact
            - funnyfact
env:
  DNS_NAME: "SOME DOMAIN"
  SERVICE_PARAMETERS: '''{
                      "funnyfact":{"url":"https://api.chucknorris.io/jokes/random", "port":"8000"}, 
                      "uselessfact":{"url":"https://uselessfacts.jsph.pl/api/v2/facts/random","port":"8001"
                      }'''

jobs:
  Build:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Service Parameters
        id: service-parameters
        run: |
                service_port=$(echo ${{ env.SERVICE_PARAMETERS }} | jq '.${{ inputs.service }}.port' |tr -d '"' )
                echo "PORT=$service_port" >> $GITHUB_OUTPUT
                service_url=$(echo ${{ env.SERVICE_PARAMETERS }} | jq '.${{ inputs.service }}.url' |tr -d '"' )
                echo "URL=$service_url" >> $GITHUB_OUTPUT

      - name: Bump version
        uses: remorses/bump-version@js
        with:
            version_file: ./VERSION
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Get New Version Number
        id: version
        run: |
            version=$(cat VERSION)
            echo "VERSION=$version" >> $GITHUB_OUTPUT

      - name: Docker Login
        uses: docker/login-action@v2.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v3.1.1
        with:
          file: Dockerfile
          context: .
          push: true
          tags:  ghcr.io/shimonelbaz/moon_active_task:latest , ghcr.io/shimonelbaz/moon_active_task:${{ steps.version.outputs.VERSION }}
            
    # Deploy using Helm charts
      - name: Deploy Using Helm
        uses: vimeda/helm@v1.7.0
        with:
          release: webapp-${{ steps.version.outputs.VERSION }}
          namespace: webapp
          chart: helm/
          token: ${{ github.token }}
          atomic: true
          values: |
            image.tag: ${{ steps.version.outputs.VERSION }}
            env.API_URL: ${{ steps.service-parameters.outputs.URL }}
            service.port: ${{ steps.service-parameters.outputs.PORT }}
            service.name: ${{ inputs.service }}
            service.hostname: ${{ env.DNS_NAME }}
        env:
          KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}
    
    # Run Tests
    
    
    #helm install ${{ inputs.service }} helm/ --set image.tag=${{ steps.version.outputs.VERSION }} --set env.API_URL=http://new-api-url.com --set service.port=XXXX --set service.name=XXXX --set  service.hostname=XXXX
